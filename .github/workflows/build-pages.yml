# .github/workflows/build-pages.yml
name: Docs Hub – GitHub Pages

################################################################################
# 1. Triggers
################################################################################
on:
  workflow_dispatch:
  schedule:                  # nightly build
    - cron: '17 3 * * *'
  repository_dispatch:       # called from library repos
    types: [update_docs]

################################################################################
# 2. Required permissions for the deploy-pages action
################################################################################
permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

################################################################################
# 3. Global variables
################################################################################
env:
  PY_VER: "3.11"
  PAT: ${{ secrets.LIBS_CLONE_PAT }}
  # one line  =  <name>  <git-ref>  <clone-URL>
  LIBRARIES: |
    shapelearn dev https://github.com/ByteShape/ShapeLearn.git

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # --- checkout *this* repo so we can write into site/ -------------
    - uses: actions/checkout@v4

    # --- Python toolchain -------------------------------------------
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PY_VER }}

    # --- clean /site ------------------------------------------------
    - name: Prepare site folder
      run: |
        rm -rf site
        mkdir -p site

    # --- Sphinx + helpers -------------------------------------------
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-autodoc-typehints myst-parser


    # --- loop through every LIBRARIES entry -------------------------
    - name: Build docs for each library / branch
      shell: bash
      run: |
        while read -r NAME REF URL; do
          [ -z "$NAME" ] && continue
          DEST="${NAME}-${REF//\//_}"
          rm -rf "$DEST"

          AUTH=${URL/https:\/\/github.com/https:\/\/x-access-token:${PAT}@github.com}
          git clone --depth 1 --branch "$REF" "$AUTH" "$DEST"
          pip install -e "$DEST"

          if [ -f "$DEST/docs/conf.py" ]; then
              DOCSRC="$DEST/docs"
          else
              DOCSRC="$DEST/_docs"
              sphinx-quickstart -q -p "$NAME $REF" -a ByteShape --sep --quiet "$DOCSRC"

              cat >>"$DOCSRC/source/conf.py" <<'PY'
        extensions = [
            'sphinx.ext.autodoc',
            'sphinx.ext.autosummary',
            'sphinx.ext.napoleon',
            'sphinx_autodoc_typehints',
        ]
        autosummary_generate = True
        html_copy_source = False
        html_show_sourcelink = False
        PY

              sphinx-apidoc -fME --module-first -o "$DOCSRC/source/api" "$DEST/$NAME"
              printf ".. toctree::\n   :maxdepth: 2\n\n   api/%s\n" "$NAME" \
                > "$DOCSRC/source/index.rst"
          fi

          sphinx-build -b html "$DOCSRC/source" "site/$DEST"
        done <<< "${LIBRARIES}"


    # --- simple landing page ----------------------------------------
    - name: Generate landing page
      shell: python
      run: |
        import pathlib, html, textwrap
        root = pathlib.Path("site")
        links = "\n".join(
            f'<li><a href="{d.name}/index.html">{html.escape(d.name)}</a></li>'
            for d in sorted(root.iterdir()) if d.is_dir()
        )
        (root / "index.html").write_text(textwrap.dedent(f"""
          <!doctype html>
          <meta charset="utf-8">
          <title>ByteShape – Documentation Hub</title>
          <h1>ByteShape Documentation</h1>
          <p>Select a library build:</p>
          <ul>{links}</ul>
        """), encoding="utf-8")
    
    - uses: actions/configure-pages@v4
    # --- upload as Pages artifact -----------------------------------
    - uses: actions/upload-pages-artifact@v3
      with:
        path: site

  deploy:
    needs: build                        # <-- MUST depend on build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url:  ${{ steps.deployment.outputs.page_url }}   # nice-to-have
    permissions:
      pages: write
      id-token: write
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages   # <-- same explicit name
