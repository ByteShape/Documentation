# .github/workflows/build-pages.yml
name: Docs Hub – GitHub Pages

#############################################################################
# 1. When should the workflow run?
#    - Manually (workflow_dispatch)
#    - Nightly at 03:17 UTC (cron)
#    - Or whenever another repo triggers repository_dispatch:update_docs
#############################################################################
on:
  workflow_dispatch:
  schedule:
    - cron: '17 3 * * *'
  repository_dispatch:
    types: [update_docs]

#############################################################################
# 2. Permissions:  pages:write + id-token:write are required by deploy-pages
#############################################################################
permissions:
  contents: read
  pages: write
  id-token: write

#############################################################################
# 3. Global variables
#    LIBRARIES = whitespace-separated pairs: <name> <git clone URL>
#############################################################################
env:
  PY_VER: "3.11"
  LIBRARIES: |
    shapelearn main https://github.com/ByteShape/ShapeLearn.git
    shapelearn dev https://github.com/ByteShape/ShapeLearn.git

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 3.1 Check out *this* docs-hub repo (needed so we can write into site/)
    - uses: actions/checkout@v4

    # 3.2 Python toolchain
    - uses: actions/setup-python@v5
      with: { python-version: ${{ env.PY_VER }} }

    # 3.3 Prepare empty site/ folder
    - name: Remove previous site folder
      run: |
        rm -rf site
        mkdir -p site

    # 3.4 Install Sphinx toolchain once
    - name: Install doc build deps
      run: |
        pip install \
          sphinx sphinx-autodoc-typehints myst-parser \
          sphinxcontrib-napoleon

    # 3.5 Loop over each library → clone, install, build HTML
    - name: Build docs for each library
      shell: bash
      run: |
        while read -r NAME URL; do
          [ -z "$NAME" ] && continue        # skip blank lines
          echo "===== Building $NAME ====="

          # clone shallow
          git clone --depth 1 "$URL" "$NAME"

          # editable install
          pip install -e "$NAME"

          # detect docs folder
          if [ -f "$NAME/docs/conf.py" ]; then
            DOCSRC="$NAME/docs"
          else
            # generate minimal Sphinx project on the fly
            DOCSRC="$NAME/_docs"
            sphinx-quickstart -q -p "$NAME" -a "ByteShape" -v "0.0" \
              --sep --dot _ --quiet "$DOCSRC"

            # simple conf tweaks (disable source copy)
            echo "html_copy_source = False" >> "$DOCSRC/source/conf.py"
            echo "html_show_sourcelink = False" >> "$DOCSRC/source/conf.py"

            # auto stub files
            sphinx-apidoc -fME -o "$DOCSRC/source/api" "$NAME/$NAME"
            # minimal toctree
            printf ".. toctree::\n   :maxdepth: 2\n\n   api/%s\n" "$NAME" \
                > "$DOCSRC/source/index.rst"
          fi

          # build html into site/<name>
          sphinx-build -b html "$DOCSRC/source" "site/$NAME"
        done <<< "${LIBRARIES}"

    # 3.6 Generate /site/index.html landing page
    - name: Generate landing page
      shell: python
      run: |
        import pathlib, textwrap, html
        root = pathlib.Path("site")
        links = "\n".join(
            f'<li><a href="{d.name}/index.html">{html.escape(d.name)}</a></li>'
            for d in sorted(root.iterdir()) if d.is_dir()
        )
        (root / "index.html").write_text(textwrap.dedent(f"""
          <!doctype html>
          <meta charset="utf-8">
          <title>ByteShape – Documentation Hub</title>
          <h1>ByteShape Documentation</h1>
          <p>Select a library:</p>
          <ul>{links}</ul>
        """), encoding="utf-8")

    # 3.7 Upload site/ as the artifact to be deployed
    - uses: actions/upload-pages-artifact@v3
      with: { path: site }

  ###########################################################################
  # 4. Deploy job – uses the official deploy-pages action
  ###########################################################################
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url:  ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
    - id: deployment
      uses: actions/deploy-pages@v2
